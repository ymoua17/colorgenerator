{"version":3,"sources":["Components/Colors/Colors.js","Components/Specifications/Specifications.js","Components/Code/Code.js","Container/App.js","serviceWorker.js","index.js"],"names":["Colors","_ref","color1","handleChange1","color2","handleChange2","react_default","a","createElement","className","lib","color","onChange","Specifications","degree","degreeChange","min","max","type","value","Code","this","props","code","React","Component","body","document","getElementById","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","randomButton","setState","hex","console","log","event","target","degreeVal","Math","floor","random","colorArr1","colorArr2","i","push","concat","c1","c2","d","_this$state","style","background","backgroundRepeat","backgroundSize","backgroundAttachment","onClick","Components_Colors_Colors","Components_Specifications_Specifications","Components_Code_Code","react_copy_to_clipboard_lib","text","Boolean","window","location","hostname","match","ReactDOM","render","src_Container_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.67207e34.chunk.js","sourcesContent":["import React from 'react';\nimport { HuePicker } from 'react-color';\n\nconst Colors = ({ color1, handleChange1, color2, handleChange2 }) => {\n    return (\n        <div>\n            <h2 className=\"f2 i\">-Pick Your Colors</h2>\n            <div className=\"flex flex-column items-center\">\n                <HuePicker className=\"ba b--black-80\" color={color1} onChange={handleChange1} />\n                <br/>\n                <HuePicker className=\"ba b--black-80\"color={color2} onChange={handleChange2} />\n            </div>\n        </div>\n    )\n}\n\nexport default Colors;","import React from 'react';\nimport './Specifications.css';\n\nconst Specifications = ({ degree, degreeChange }) => {\n    return (\n        <div>\n            <h2 className=\"f2 i\">-Enter a Value</h2>\n            <input className=\"ba b--black-80 tc\" min=\"0\" max=\"360\" type=\"number\" value={degree} onChange={degreeChange} />\n        </div>\n    )\n}\n\nexport default Specifications;","import React from 'react';\n\nclass Code extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2 className=\"f2 i\">-Copy Your Code</h2>\n                <h3 className=\"pa2\">{this.props.code};</h3>\n            </div>\n        )\n    }\n}\n\nexport default Code;","import React, { Component } from 'react';\nimport Colors from '../Components/Colors/Colors';\nimport Specifications from '../Components/Specifications/Specifications';\nimport Code from '../Components/Code/Code';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport './App.css';\nimport 'tachyons';\n\n\nconst body = document.getElementById('gradient');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color1: \"rgb(255, 0, 0)\",\n      color2: \"rgb(0, 0, 255)\",\n      degree: 0,\n    }\n    this.handleChange1 = this.handleChange1.bind(this);\n    this.handleChange2 = this.handleChange2.bind(this);\n    this.degreeChange = this.degreeChange.bind(this);\n    this.randomButton = this.randomButton.bind(this);\n  }\n  handleChange1(color) {\n    this.setState({\n      color1: color.hex\n    })\n  }\n  handleChange2(color) {\n    this.setState({\n      color2: color.hex\n    })\n    console.log(color.hex)\n  }\n  degreeChange(event) {\n    this.setState({\n      degree: event.target.value\n    })\n  }\n  randomButton() {\n    let degreeVal = Math.floor((Math.random() * 360) + 1);\n    let colorArr1 = [];\n    let colorArr2 = [];\n    let i = 0;\n    while (i < 3) {\n      colorArr1.push(Math.floor((Math.random() * 255) + 1));\n      colorArr2.push(Math.floor((Math.random() * 255) + 1));\n      i++;\n    }\n    this.setState({\n      color1: `rgb(${colorArr1[0]}, ${colorArr1[1]}, ${colorArr1[2]})`,\n      color2: `rgb(${colorArr2[0]}, ${colorArr2[1]}, ${colorArr2[2]})`,\n      degree: degreeVal\n    })\n  }\n\n  render() {\n    const { color1, color2, degree } = this.state;\n    const changeBackground = (c1, c2, d) => {\n      body.style.background = `linear-gradient(${d}deg, ${c1}, ${c2})`;\n      body.style.backgroundRepeat = \"no-repeat\";\n      body.style.backgroundSize = \"cover\";\n      body.style.backgroundAttachment = \"fixed\";\n  }\n    changeBackground(color2, color1, degree);\n\n    return (\n      <div className=\"App pv2\">\n        <h1 className=\"f1 underline\">Color Generator</h1>\n        <button className=\"grow dib pointer\" onClick={this.randomButton}>Randmonize!</button>\n        <Colors color1={this.state.color1} handleChange1={this.handleChange1} color2={this.state.color2} handleChange2={this.handleChange2}/>\n        <Specifications degree={this.state.degree} degreeChange={this.degreeChange} />\n        <Code code={body.style.background}/>\n        <div className=\"pb4\">\n          <CopyToClipboard text={body.style.background}>\n            <button className=\"grow dib pointer\">Copy to clipboard!</button>\n          </CopyToClipboard>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["Components/Title/Title.js","Components/RandomButton/RandomButton.js","Components/Colors/Colors.js","Components/Specifications/Specifications.js","Components/Code/Code.js","Container/App.js","serviceWorker.js","index.js","Components/RandomButton/colorwheel.png"],"names":["Title","react_default","a","createElement","className","RandomButton","_ref","randomButton","src","colorWheel","alt","onClick","Colors","color1","colorChange1","color2","colorChange2","lib","color","onChange","Specifications","degree","degreeChange","min","max","type","value","Code","this","props","code","React","Component","body","document","getElementById","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","r","rgb","g","b","setState","concat","event","target","degreeVal","Math","floor","random","rgbArr1","rgbArr2","i","push","c1","c2","d","_this$state","codeCopy","style","background","Components_Title_Title","Components_RandomButton_RandomButton","Components_Colors_Colors","handleChange1","handleChange2","Components_Specifications_Specifications","Components_Code_Code","react_copy_to_clipboard_lib","text","Boolean","window","location","hostname","match","ReactDOM","render","src_Container_App","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9a11fd21.chunk.js","sourcesContent":["import React from 'react';\nimport './Title.css';\n\nconst Title = () => {\n    return (\n        <div>\n            <h1 className=\"f1 underline\">\n                <span className=\"white\">C</span>\n                <span className=\"red\">o</span>\n                <span className=\"orange\">l</span>\n                <span className=\"yellow\">o</span>\n                <span className=\"green\">r </span>\n                <span className=\"light-green\">G</span>\n                <span className=\"light-blue\">e</span> \n                <span className=\"blue\">n</span>\n                <span className=\"dark-blue\">e</span>\n                <span className=\"purple\">r</span>\n                <span className=\"light-purple\">a</span>\n                <span className=\"hot-pink\">t</span>\n                <span className=\"dark-pink\">o</span>\n                <span className=\"dark-red\">r</span>\n            </h1>\n        </div>\n    )\n}\n\nexport default Title;","import React from 'react';\nimport colorWheel from './colorwheel.png';\nimport './colorwheel.css';\n\nconst RandomButton = ({ randomButton }) => {\n    return(\n        <div>\n            <img src={colorWheel} alt=\"randominze!\" className=\"size pointer pa2 fw6 shadow-5\" onClick={randomButton} />\n            <p className=\"fw6\">Click the rotating color wheel!</p>\n        </div>\n        \n    )\n}\n\nexport default RandomButton;","import React from 'react';\nimport { HuePicker } from 'react-color';\n\nconst Colors = ({ color1, colorChange1, color2, colorChange2 }) => {\n    return (\n        <div>\n            <h2 className=\"f2 i\">-Pick Your Colors</h2>\n            <div className=\"flex flex-column items-center\">\n                <HuePicker className=\"ba b--black-80\" color={color1} onChange={colorChange1} />\n                <br/>\n                <HuePicker className=\"ba b--black-80\"color={color2} onChange={colorChange2} />\n            </div>\n        </div>\n    )\n}\n\nexport default Colors;","import React from 'react';\nimport './Specifications.css';\n\nconst Specifications = ({ degree, degreeChange }) => {\n    return (\n        <div>\n            <h2 className=\"f2 i\">-Enter a Value</h2>\n            <input className=\"ba b--black-80 tc\" min=\"0\" max=\"360\" type=\"number\" value={degree} onChange={degreeChange} />\n        </div>\n    )\n}\n\nexport default Specifications;","import React from 'react';\n\nclass Code extends React.Component {\n    render() {\n        return (\n            <div>\n                <h2 className=\"f2 i\">-Copy Your Code</h2>\n                <h3 className=\"pa2\">{this.props.code};</h3>\n            </div>\n        )\n    }\n}\n\nexport default Code;","import React, { Component } from 'react';\nimport Title from '../Components/Title/Title';\nimport RandomButton from '../Components/RandomButton/RandomButton';\nimport Colors from '../Components/Colors/Colors';\nimport Specifications from '../Components/Specifications/Specifications';\nimport Code from '../Components/Code/Code';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport './App.css';\nimport 'tachyons';\n\n\n// Update background color part 1.\nconst body = document.getElementById('gradient');\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color1: \"rgb(255, 0, 0)\",\n      color2: \"rgb(0, 0, 255)\",\n      degree: 0,\n    }\n    this.colorChange1 = this.colorChange1.bind(this);\n    this.colorChange2 = this.colorChange2.bind(this);\n    this.degreeChange = this.degreeChange.bind(this);\n    this.randomButton = this.randomButton.bind(this);\n  }\n  colorChange1(color) {\n    const r = color.rgb.r;\n    const g = color.rgb.g;\n    const b = color.rgb.b;\n    this.setState({\n      color1: `rgb(${r}, ${g}, ${b})`\n    })\n  }\n  colorChange2(color) {\n    const r = color.rgb.r;\n    const g = color.rgb.g;\n    const b = color.rgb.b;\n    this.setState({\n      color2: `rgb(${r}, ${g}, ${b})`\n    })\n  }\n  degreeChange(event) {\n    this.setState({\n      degree: event.target.value\n    })\n  }\n  randomButton() {\n    let degreeVal = Math.floor((Math.random() * 360) + 1);\n    let rgbArr1 = [];\n    let rgbArr2 = [];\n    let i = 0;\n    while (i < 3) {\n      rgbArr1.push(Math.floor((Math.random() * 255) + 1));\n      rgbArr2.push(Math.floor((Math.random() * 255) + 1));\n      i++;\n    }\n    this.setState({\n      color1: `rgb(${rgbArr1[0]}, ${rgbArr1[1]}, ${rgbArr1[2]})`,\n      color2: `rgb(${rgbArr2[0]}, ${rgbArr2[1]}, ${rgbArr2[2]})`,\n      degree: degreeVal\n    })\n  }\n\n  render() {\n\n    // Update background part 2.\n    const { color1, color2, degree } = this.state;\n    let codeCopy = \"\";\n    const changeBackground = (c1, c2, d) => {\n      codeCopy = `linear-gradient(${d}deg, ${c1}, ${c2})`\n      body.style.background = `linear-gradient(${d}deg, ${c1}, ${c2}) 0% 0% / cover no-repeat fixed`;\n  }\n    changeBackground(color2, color1, degree);\n\n    return (\n      <div className=\"App pv2\">\n        <Title />\n        <RandomButton randomButton={this.randomButton} />\n        <Colors color1={this.state.color1} colorChange1={this.handleChange1} color2={this.state.color2} colorChange2={this.handleChange2}/>\n        <Specifications degree={this.state.degree} degreeChange={this.degreeChange} />\n        <Code code={codeCopy}/>\n        <div className=\"pb4\">\n          <CopyToClipboard text={codeCopy}>\n            <button className=\"grow dib pointer pa2 fw6\">Copy to clipboard!</button>\n          </CopyToClipboard>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Container/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/colorwheel.884fa3b0.png\";"],"sourceRoot":""}